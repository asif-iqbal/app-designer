<style type="text/css">

#imageView {
	border: 1px solid #000;
	background-color:#fff;
}
</style>
<form role="form">
<div class="form-group">
    <div class="input-container">{{! used to prevent swiping on sliders}}
    <input id="slider-{{name}}-sketch"
        type="hidden"
        class="form-control"
        placeholder="{{{localize display.text}}}"
        name="{{name}}"
        value="{{value}}"
        {{#eachProperty inputAttributes}}
            {{property}}="{{value}}"
        {{/eachProperty}}
        {{#if disabled}}
            style="background-color:lightgray;"
            disabled="true"
        {{/if}}
        />
    </div>

<div id="sketch">

<canvas id="can-{{name}}" width="400" height="400" style="border: 1px solid;background-color: #fff;width: 100%;"></canvas>
</div>
<input type="button" class="btn btn-default btn-lg" value="Save" id="btn" onclick="save(this)">
<input type="button" class="btn btn-default btn-lg" value="Clear" id="clr" onclick="erase()">

<div class="mediaContainer" id="imageView">
        <img id="canvasimg-{{name}}" style="position:relative;top:10%;left: 0%;border: 1px solid;background-color: #fff;width: 100%;" />
</div>
</div>
</form>
<script type="text/javascript">


init()
var canvas, ctx, flag = false,
    prevX = 0,
    currX = 0,
    prevY = 0,
    currY = 0,
    dot_flag = false;

var x = "black",
    y = 2;

function init() {
    document.getElementById("canvasimg-{{name}}").src = document.getElementById("slider-{{name}}-sketch").value;

    canvas = document.getElementById('can-{{name}}');
							
	w = canvas.width;
    h = canvas.height;
	
    var ctx = canvas.getContext('2d');

    var sketch = document.querySelector('#sketch');
    var sketch_style = getComputedStyle(sketch);
    canvas.width = parseInt(sketch_style.getPropertyValue('width'));
    canvas.height = parseInt(sketch_style.getPropertyValue('height'));

    var mouse = {x: 0, y: 0};
    var last_mouse = {x: 0, y: 0};

    /* Mouse Capturing Work */
    canvas.addEventListener('touchmove', function(e) {
        e.preventDefault();
    	var touch = e.touches[0];

        last_mouse.x = mouse.x;
        last_mouse.y = mouse.y;

        mouse.x = touch.pageX - this.offsetLeft;
        mouse.y = touch.pageY - this.offsetTop;
    }, false);


    /* Drawing on Paint App */
    ctx.lineWidth = 1;
    ctx.lineJoin = 'round';
    ctx.lineCap = 'round';
    ctx.strokeStyle = 'black';

    canvas.addEventListener('touchstart', function(e) {
        canvas.addEventListener('touchmove', onPaint, false);
    }, false);

    canvas.addEventListener('touchend', function() {
        canvas.removeEventListener('touchmove', onPaint, false);
    }, false);

    var onPaint = function() {
        ctx.beginPath();
        ctx.moveTo(last_mouse.x, last_mouse.y);
        ctx.lineTo(mouse.x, mouse.y);
        ctx.closePath();
        ctx.stroke();
    };
				
}

function color(obj) {
    switch (obj.id) {
        case "green":
            x = "green";
            break;
        case "blue":
            x = "blue";
            break;
        case "red":
            x = "red";
            break;
        case "yellow":
            x = "yellow";
            break;
        case "orange":
            x = "orange";
            break;
        case "black":
            x = "black";
            break;
        case "white":
            x = "white";
            break;
    }
    if (x == "white") y = 14;
    else y = 2;

}

function draw() {
    ctx.beginPath();
    ctx.moveTo(prevX, prevY);
    ctx.lineTo(currX, currY);
    ctx.strokeStyle = x;
    ctx.lineWidth = y;
    ctx.stroke();
    ctx.closePath();
}

function erase() {
   // var m = confirm("Want to clear");
    //if (m) {
        document.getElementById('can-{{name}}').getContext('2d').clearRect(0, 0, w, h);
        document.getElementById("canvasimg-{{name}}").style.display = "none";
    //}
}

function save() {
    var dataURL = canvas.toDataURL();
				//	$("#canvasimg").attr("src",dataURL);
    document.getElementById("canvasimg-{{name}}").src = dataURL;
	document.getElementById("slider-{{name}}-sketch").value = dataURL;
    document.getElementById("canvasimg-{{name}}").style.display = "inline";
}

function findxy(res, e) {
    if (res == 'down') {
        prevX = currX;
        prevY = currY;
        currX = e.clientX - canvas.offsetLeft;
        currY = e.clientY - canvas.offsetTop;

        flag = true;
        dot_flag = true;
        if (dot_flag) {
            ctx.beginPath();
            ctx.fillStyle = x;
            ctx.fillRect(currX, currY, 2, 2);
            ctx.closePath();
            dot_flag = false;
        }
    }
    if (res == 'up' || res == "out") {
        flag = false;
    }
    if (res == 'move') {
        if (flag) {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft;
            currY = e.clientY - canvas.offsetTop;
            draw();
        }
    }
}
</script>





